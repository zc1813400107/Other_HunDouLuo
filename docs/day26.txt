回顾:
1.static final常量
2.抽象类
    1)作为父类(包含子类所共有的特征和行为)
      目的:代码的重用
    2)为子类提供了一种公共的类型
    3)可以包含抽象方法，给子类提供一个统一的入口
3.接口
    1)定义一个标准、规范
      遵守了这个标准，就能干某件事



1.若多个类具有公共的东西，泛化(抽父类)
class FlyingObject{  //飞行物类
   width,height,image,x,y
}
2.设计方法时，若所有子类都共有一个行为
  将方法设计在父类中
  若子类的行为都一样，就写普通方法，被子类继承
  若子类的行为不一样，就写成抽象方法，类也得抽象
abstract class FlyingObject{  //飞行物类
   width,height,image,x,y
   abstract void step();
}

接口:只能常量和抽象方法
扩展性好、维护性好、重用性好.....
业务逻辑、算法


正课:

笔记:
1.多态:多种形态
    1)同一类型的引用指向不同的对象时，有不同的实现
      -----cut
    2)同一个对象被造型成不同的类型时，有不同的功能
      -----me
2.向上造型:父类型的引用指向子类的对象
    1)造型为父类类型
    2)造型为接口类型
3.强制类型转换，成功只有两种情况:
    1)引用指向对象就是该类型
    2)引用指向对象实现了该接口
  若不符合如上两种情况，会现类型转换异常(ClassCastException)
  所以，在强转之前，可以加instanceof判断
  if(引用 instanceof 类型){
  }
  instanceof为真则强制肯定成功
4.内部类:-----应用率比较低
    1)一个类定义在另外一个类的内部
      里面的类叫Inner，外面的类叫Outer
    2)何时用:
        当一个类只服务于另一个类时
    3)内部类的对象通常只在外部类中创建
      内部类中可以访问外部类的成员(包括私有的)
    4)内部类中有一个隐式的引用指向外部类对象
        外部类.this
5.匿名内部类:----应用率比较高
    1)没有名字的内部类
    2)何时用:
        若一个类只需要被创建一个对象
	前提:匿名内部类必须得实现了某个接口或者是继承了某个类
	     ----必须得是子类
    3)语法:
        父类 引用 = new 父类(){
	   匿名内部类的类体
	};
	//1.创建了Aoo的子类--没有名
	//2.创建了这个子类的对象,名为o
	Aoo o = new Aoo(){
	};
    4)匿名内部类中若想访问外部的数据，
      该数据必须是final的
6.面向对象的三大特征
    1)封装
      1.1)类:封装数据和方法，作为一个整体
      1.2)方法:封装业务逻辑代码
      1.3)访问修饰符:封装的数据和方法的访问权限
    2)继承
      2.1)目的:实现代码的重用
      2.2)意义:
          2.2.1)封装子类共有的数据和方法---重用
	  2.2.2)为子类提供一种公共的类型---向上造型
    3)多态
      3.1)特征:
          3.1.1)同一类型引用指向不同对象有不同的实现
	  3.1.2)同一对象被造型为不同类型有不同的功能
      3.2)表现形式:
            重写、重载
      3.3)意义:
            提高代码的扩展性、维护性、复用性......


课程内容:
day01:
   类、对象
day02:
   重载、构造方法、引用类型数组
day03:
   内存管理、继承
day04:
   重写、包、访问修饰符、static、final
day05:
   抽象类、接口
day06:
   多态、内部类








